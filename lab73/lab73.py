def resolve(current: list, clause: list):
	# current and clause are in the form of a list
	# for example [443, -442, etc] and [521]
	# returns 1 if answer is always true
	# returns empty list if it doesn't combine
	# returns empty list in list if proof
	# returns list of result(s) otherwise, should be always just one though
	similarities = [abs(a) for a in set(current).intersection(set([-a for a in clause]))]
	if len(similarities) == 0:
		return []
	if len(similarities) > 1:
		return 1
	answ = set()
	for x in current + clause:
		if abs(x) not in similarities:
			answ.add(x)
	return [list(answ)]


def resolution_solver(KB, neg_alpha):
	# KB: list of known clauses
	#           clause example: a v b v -c v d
	#           xys is representation. x and y are coordinates and s is state.
	#           s can be 0 (nothing), 1 (smell), 2 (breeze), 3 (beast), 4 (pit), 5 (glitter). Negative number for neg state
	# neg_alpha: query clause, already negated
	# returns True if proof found, False otherwise

	# initialize
	todo = [neg_alpha]
	done = KB.copy()

	# process the todo list one by one
	while todo:
		current = todo.pop()

		# check if current is redundant
		f = False
		for clause in done + todo:
			f = False
			for item in clause:
				if item not in current:
					f = True
					break
			if not f:
				break
		if not f:
			continue

		# combine current clause with all clauses we've already seen
		for clause in done:
			# apply resolution rule
			resolvents = resolve(current, clause)

			# 2. resolvent is always true: throw it away, useless clause
			if resolvents == 1:
				continue
			# handle new clauses generated by the resolution rule
			for resolvent in resolvents:
				# 1. resolvent is empty: proof found that KB->alpha!
				if not resolvent:
					return True
				# ONLY if neither of these things happen:
				todo.append(resolvent)

		# we're done with this clause
		done.append(current)

	# loop ended without proof
	return False


KB = [  # 1P, 2Q, 3L, 4M, 5B, 6A
	[-1, 2],
	[-3, -4, 1],
	[-5, -3, 4],
	[-6, -1, 3],
	[-6, -5, 3],
	# [6],
	[5]
]

neg = [-2]

print(resolution_solver(KB, neg))